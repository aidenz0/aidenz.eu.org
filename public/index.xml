<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>我的全新 Hugo 网站</title>
        <link>//localhost:1313/</link>
        <description>aidenz的个人网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>aidenz2019@outlook.com (aidenz)</managingEditor>
            <webMaster>aidenz2019@outlook.com (aidenz)</webMaster><lastBuildDate>Fri, 10 Oct 2025 09:34:27 &#43;0800</lastBuildDate>
            <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Test</title>
    <link>//localhost:1313/posts/test/</link>
    <pubDate>Fri, 10 Oct 2025 09:34:27 &#43;0800</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/test/</guid>
    <description><![CDATA[<p></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/listsetqueue%E5%92%8Cmap/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/listsetqueue%E5%92%8Cmap/</guid>
    <description><![CDATA[<h1 id="listsetqueue和map">List、Set、Queue和Map</h1>
<p></p>
<p>Java集合框架分类两条大的支线：</p>
<ol>
<li>Collection，主要由 List、Set、Queue 组成：</li>
</ol>
<ul>
<li>List 代表有序、可重复的集合，典型代表就是封装了动态数组的 ArrayList和封装了链表的LinkedList；</li>
<li>Set 代表无序、不可重复的集合，典型代表就是 HashSet 和 TreeSet；</li>
<li>Queue 代表队列，典型代表就是双端队列 ArrayDeque，以及优先级队列PriorityQueue。</li>
</ul>
<ol start="2">
<li>Map，代表键值对的集合，典型代表就是HashMap。</li>
</ol>
<h2 id="1-list">1. list</h2>
<p>List 的特点是存取有序，可以存放重复的元素，可以用下标对元素进行操作。</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/final-%E5%85%B3%E9%94%AE%E5%AD%97/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/final-%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
    <description><![CDATA[<h3 id="final-关键字">final 关键字</h3>
<h4 id="final-变量">final 变量</h4>
<p>被 final 修饰的变量无法重新赋值。换句话说，final 变量一旦初始化，就无法更改。
final 修饰的成员变量必须有一个默认值，否则编译器将会提醒没有初始化。</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-instanceof/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-instanceof/</guid>
    <description><![CDATA[<h3 id="java-instanceof">Java instanceof</h3>
<p>用意也非常简单，判断对象是否符合指定的类型，结果要么是 true，要么是 false。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="p">(</span><span class="n">object</span><span class="p">)</span><span class="w"> </span><span class="k">instanceof</span><span class="w"> </span><span class="p">(</span><span class="n">type</span><span class="p">)</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-this%E5%92%8Csuper%E5%85%B3%E9%94%AE%E5%AD%97/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-this%E5%92%8Csuper%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
    <description><![CDATA[<h3 id="javathis和super关键字">Javathis和super关键字</h3>
<h4 id="this">this</h4>
<ul>
<li>调用当前类的方法；</li>
<li><code>this()</code>  可以调用当前类的构造方法；</li>
<li>this 可以作为参数在方法中传递；</li>
<li>this 可以作为参数在构造方法中传递；</li>
<li>this 可以作为方法的返回值，返回当前类的对象</li>
</ul>
<h4 id="super">super</h4>
<ul>
<li>指向父类对象；</li>
<li>调用父类的方法；</li>
<li><code>super()</code>  可以调用父类的构造方法。</li>
</ul>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E4%BB%A3%E7%A0%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E4%BB%A3%E7%A0%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97/</guid>
    <description><![CDATA[<h3 id="java-代码初始化块">Java 代码初始化块</h3>
<p>![[Pasted image 20250820164453.png]]</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E5%86%85%E9%83%A8%E7%B1%BB/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E5%86%85%E9%83%A8%E7%B1%BB/</guid>
    <description><![CDATA[<h3 id="java内部类">Java内部类</h3>
<h4 id="成员内部类">成员内部类</h4>
<p>成员内部类是最常见的内部类</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w"> </span><span class="kd">class</span> <span class="nc">Wanger</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">18</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">class</span> <span class="nc">Wangxiaoer</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">81</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>看起来内部类 Wangxiaoer 就好像 Wanger 的一个成员，成员内部类可以无限制访问外部类的所有成员属性。</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid>
    <description><![CDATA[<h3 id="java-抽象类">Java 抽象类</h3>
<h4 id="定义抽象类">定义抽象类</h4>
<p>定义抽象类的时候需要用到关键字  <code>abstract</code>，放在  <code>class</code>  关键字前，就像下面这样。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">abstract</span><span class="w"> </span><span class="kd">class</span> <span class="nc">AbstractPlayer</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<h4 id="抽象类的特征">抽象类的特征</h4>
<p>抽象类是不能实例化的，尝试通过  <code>new</code>  关键字实例化的话，编译器会报错，提示“类是抽象的，不能实例化”。
虽然抽象类不能实例化，但可以有子类。子类通过  <code>extends</code>  关键字来继承抽象类。就像下面这样。</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E6%8E%A5%E5%8F%A3/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E6%8E%A5%E5%8F%A3/</guid>
    <description><![CDATA[<h3 id="java接口">Java接口</h3>
<p>接口通过 interface 关键字来定义，它可以包含一些常量和方法，来看下面这个示例。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">interface</span> <span class="nc">Electronic</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 常量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">String</span><span class="w"> </span><span class="n">LED</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;LED&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 抽象方法</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="nf">getElectricityUse</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 静态方法</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">isEnergyEfficient</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">electtronicType</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">electtronicType</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">LED</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 默认方法</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">default</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">printDescription</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;电子&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p><strong>接口中定义的变量会在编译的时候自动加上  <code>public static final</code>  修饰符</strong>
<strong>没有使用  <code>private</code>、<code>default</code>  或者  <code>static</code>  关键字修饰的方法是隐式抽象的</strong>，在编译的时候会自动加上  <code>public abstract</code>  修饰符。
<strong>从 Java 8 开始，接口中允许有静态方法</strong>，接口中定义静态方法的目的是为了提供一种简单的机制，使我们不必创建对象就能调用方法，从而提高接口的竞争力。
<strong>接口中允许定义  <code>default</code>  方法</strong>
允许在接口中定义默认方法的理由很充分，因为一个接口可能有多个实现类，这些类就必须实现接口中定义的抽象类，否则编译器就会报错。假如我们需要在所有的实现类中追加某个具体的方法，在没有  <code>default</code>  方法的帮助下，我们就必须挨个对实现类进行修改。
<strong>接口不允许直接实例化</strong>，否则编译器会报错。
需要定义一个类去实现接口，见下例。</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E6%9E%9A%E4%B8%BE/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-%E6%9E%9A%E4%B8%BE/</guid>
    <description><![CDATA[<h3 id="java-枚举">Java 枚举</h3>
<p>枚举（enum），是 Java 1.5 时引入的关键字，它表示一种特殊类型的类，继承自 java.lang.Enum。
新建一个枚举。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">enum</span><span class="w"> </span><span class="n">PlayerType</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">TENNIS</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">FOOTBALL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">BASKETBALL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>其反编译后的字节码。</p>]]></description>
</item>
</channel>
</rss>
