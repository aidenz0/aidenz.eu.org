<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 我的全新 Hugo 网站</title>
        <link>//localhost:1313/posts/</link>
        <description>All Posts | 我的全新 Hugo 网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>aidenz2019@outlook.com (aidenz)</managingEditor>
            <webMaster>aidenz2019@outlook.com (aidenz)</webMaster><lastBuildDate>Sat, 25 Oct 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="//localhost:1313/posts/" rel="self" type="application/rss+xml" /><item>
    <title>dify修改嵌入聊天框的power by图标</title>
    <link>//localhost:1313/posts/dify/dify%E4%BF%AE%E6%94%B9%E5%B5%8C%E5%85%A5%E8%81%8A%E5%A4%A9%E6%A1%86%E7%9A%84power-by%E5%9B%BE%E6%A0%87/</link>
    <pubDate>Sat, 25 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/dify/dify%E4%BF%AE%E6%94%B9%E5%B5%8C%E5%85%A5%E8%81%8A%E5%A4%A9%E6%A1%86%E7%9A%84power-by%E5%9B%BE%E6%A0%87/</guid>
    <description><![CDATA[<h1 id="背景">背景</h1>
<p>最近近期公司需要使用dify框架开发一个公司网站的AI客服助手，但是嵌入网站时会显示powered by dify。有dify的logo。</p>
<h1 id="版本">版本</h1>
<p>dify版本：1.9.1
docker部署</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/2.-%E6%96%87%E4%BB%B6%E6%B5%81/</link>
    <pubDate>Fri, 17 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/2.-%E6%96%87%E4%BB%B6%E6%B5%81/</guid>
    <description><![CDATA[<p><code>java.io.File</code> 类是专门对文件进行操作的类，注意只能对文件本身进行操作，不能对文件内容进行操作，想要操作内容，必须借助输入输出流。</p>
<p><code>File</code> 类是文件和文件夹的抽象表示，主要用于文件和文件夹的创建、查找和删除等操作。</p>]]></description>
</item>
<item>
    <title>Iterator和Iterable有什么区别</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/iterator%E5%92%8Citerable%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
    <pubDate>Thu, 16 Oct 2025 14:52:00 &#43;0800</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/iterator%E5%92%8Citerable%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
    <description><![CDATA[<p>Iterator 是个接口，JDK 1.2 的时候就有了，用来改进 Enumeration 接口：</p>
<ul>
<li>允许删除元素（增加了 remove 方法）</li>
<li>优化了方法名（Enumeration 中是 hasMoreElements 和 nextElement，不简洁）
 Iterator 的源码：
 <code>java  public interface Iterator&lt;E&gt; { // 判断集合中是否存在下一个对象 boolean hasNext(); // 返回集合中的下一个对象，并将访问指针移动一位 E next(); // 删除集合中调用next()方法返回的对象 default void remove() { throw new UnsupportedOperationException(&quot;remove&quot;); } }  </code>
JDK 1.8 时，Iterable 接口中新增了 forEach 方法。该方法接受一个 Consumer 对象作为参数，用于对集合中的每个元素执行指定的操作。该方法的实现方式是使用 for-each 循环遍历集合中的元素，对于每个元素，调用 Consumer 对象的 accept 方法执行指定的操作。</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">default</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">forEach</span><span class="p">(</span><span class="n">Consumer</span><span class="o">&lt;?</span><span class="w"> </span><span class="kd">super</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">action</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Objects</span><span class="p">.</span><span class="na">requireNonNull</span><span class="p">(</span><span class="n">action</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">T</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="k">this</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">action</span><span class="p">.</span><span class="na">accept</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>该方法实现时首先会对 action 参数进行非空检查，如果为 null 则抛出 NullPointerException 异常。然后使用 for-each 循环遍历集合中的元素，并对每个元素调用 action.accept(t) 方法执行指定的操作。由于 Iterable 接口是 Java 集合框架中所有集合类型的基本接口，因此该方法可以被所有实现了 Iterable 接口的集合类型使用。
它对 Iterable 的每个元素执行给定操作，具体指定的操作需要自己写Consumer接口通过accept方法回调出来。</p>]]></description>
</item>
<item>
    <title>IO 知识体系</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/1.-io-%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</link>
    <pubDate>Thu, 16 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/1.-io-%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</guid>
    <description><![CDATA[<p></p>
<h2 id="初识io">初识IO</h2>
<p>IO，即in和out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。</p>
<p>Java 中是通过流处理IO 的，那么什么是流？</p>]]></description>
</item>
<item>
    <title>Test</title>
    <link>//localhost:1313/posts/test/</link>
    <pubDate>Fri, 10 Oct 2025 09:34:27 &#43;0800</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/test/</guid>
    <description><![CDATA[<p></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
    <description><![CDATA[<h1 id="git-设置用户名和邮箱">git 设置用户名和邮箱</h1>
<p>全局配置用户名和邮箱</p>
<p>全局配置适用于所有仓库：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;你的用户名&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email <span class="s2">&#34;你的邮箱@example.com&#34;</span></span></span></code></pre></div></div>
<p><strong>验证配置是否成功：</strong></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git config --global user.name
</span></span><span class="line"><span class="cl">git config --global user.email</span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/%E5%AD%97%E8%8A%82%E6%B5%81/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/%E5%AD%97%E8%8A%82%E6%B5%81/</guid>
    <description><![CDATA[<h1 id="字节输出流">字节输出流</h1>
<p><code>java.io.OutputStream</code> 是<strong>字节输出流</strong>的<strong>超类</strong>（父类），我们来看一下它定义的一些共性方法：</p>
<p>1、 <code>close()</code> ：关闭此输出流并释放与此流相关联的系统资源。</p>
<p>2、 <code>flush()</code> ：刷新此输出流并强制缓冲区的字节被写入到目的地。</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/listsetqueue%E5%92%8Cmap/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/listsetqueue%E5%92%8Cmap/</guid>
    <description><![CDATA[<h1 id="listsetqueue和map">List、Set、Queue和Map</h1>
<p></p>
<p>Java集合框架分类两条大的支线：</p>
<ol>
<li>Collection，主要由 List、Set、Queue 组成：</li>
</ol>
<ul>
<li>List 代表有序、可重复的集合，典型代表就是封装了动态数组的 ArrayList和封装了链表的LinkedList；</li>
<li>Set 代表无序、不可重复的集合，典型代表就是 HashSet 和 TreeSet；</li>
<li>Queue 代表队列，典型代表就是双端队列 ArrayDeque，以及优先级队列PriorityQueue。</li>
</ul>
<ol start="2">
<li>Map，代表键值对的集合，典型代表就是HashMap。</li>
</ol>
<h2 id="1-list">1. list</h2>
<p>List 的特点是存取有序，可以存放重复的元素，可以用下标对元素进行操作。</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/final-%E5%85%B3%E9%94%AE%E5%AD%97/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/final-%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
    <description><![CDATA[<h3 id="final-关键字">final 关键字</h3>
<h4 id="final-变量">final 变量</h4>
<p>被 final 修饰的变量无法重新赋值。换句话说，final 变量一旦初始化，就无法更改。
final 修饰的成员变量必须有一个默认值，否则编译器将会提醒没有初始化。</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-instanceof/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/java-instanceof/</guid>
    <description><![CDATA[<h3 id="java-instanceof">Java instanceof</h3>
<p>用意也非常简单，判断对象是否符合指定的类型，结果要么是 true，要么是 false。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="p">(</span><span class="n">object</span><span class="p">)</span><span class="w"> </span><span class="k">instanceof</span><span class="w"> </span><span class="p">(</span><span class="n">type</span><span class="p">)</span></span></span></code></pre></div></div>]]></description>
</item>
</channel>
</rss>
