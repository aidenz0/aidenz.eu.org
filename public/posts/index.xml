<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 我的全新 Hugo 网站</title>
        <link>//localhost:1313/posts/</link>
        <description>All Posts | 我的全新 Hugo 网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>aidenz2019@outlook.com (aidenz)</managingEditor>
            <webMaster>aidenz2019@outlook.com (aidenz)</webMaster><lastBuildDate>Wed, 29 Oct 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="//localhost:1313/posts/" rel="self" type="application/rss+xml" /><item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/5.-%E7%BC%93%E5%86%B2%E6%B5%81/</link>
    <pubDate>Wed, 29 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/5.-%E7%BC%93%E5%86%B2%E6%B5%81/</guid>
    <description><![CDATA[<p>Java 的缓冲流是对字节流和字符流的一种封装，通过在内存中开辟缓冲区来提高 I/O 操作的效率。Java 通过 BufferedInputStream 和 BufferedOutputStream 来实现字节流的缓冲，通过 BufferedReader 和 BufferedWriter 来实现字符流的缓冲。</p>]]></description>
</item>
<item>
    <title>Scanner工具类</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/1.-scanner%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
    <pubDate>Wed, 29 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/1.-scanner%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid>
    <description><![CDATA[<h2 id="扫描控制台输入">扫描控制台输入</h2>
<p>使用 Scanner 类来扫描控制台输入</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Scanner</span><span class="w"> </span><span class="n">scanner</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Scanner</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="na">in</span><span class="p">);</span><span class="w"> </span><span class="c1">// 创建 Scanner 对象，从标准输入流中读取数据</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">print</span><span class="p">(</span><span class="s">&#34;请输入一个整数：&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kt">int</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">scanner</span><span class="p">.</span><span class="na">nextInt</span><span class="p">();</span><span class="w"> </span><span class="c1">// 获取用户输入的整数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;您输入的整数是：&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">num</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">scanner</span><span class="p">.</span><span class="na">nextLine</span><span class="p">();</span><span class="w"> </span><span class="c1">// 读取换行符，避免影响下一次读取</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">print</span><span class="p">(</span><span class="s">&#34;请输入一个字符串：&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">String</span><span class="w"> </span><span class="n">str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">scanner</span><span class="p">.</span><span class="na">nextLine</span><span class="p">();</span><span class="w"> </span><span class="c1">// 获取用户输入的字符串</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;您输入的字符串是：&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">str</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">scanner</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="n">关闭</span><span class="w"> </span><span class="n">Scanner</span><span class="w"> </span><span class="n">对象</span></span></span></code></pre></div></div>
<h3 id="1-nextline">1. nextLine()</h3>
<p><code>nextLine()</code> 方法会扫描输入流中的字符，直到遇到行末尾的换行符 <code>\n</code>，然后将该行的内容作为字符串返回，同时，<code>nextLine()</code> 会将 Scanner 对象的位置移动到下一行的开头，以便下一次读取数据时从下一行的开头开始读取。</p>]]></description>
</item>
<item>
    <title>try-with-resources</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/2.-try-with-resources/</link>
    <pubDate>Wed, 29 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/2.-try-with-resources/</guid>
    <description><![CDATA[<p>在处理必须关闭的资源时，始终有限考虑使用 try-with-resources，而不是 try–catch-finally。前者产生的代码更加简洁、清晰，产生的异常信息也更靠谱。</p>]]></description>
</item>
<item>
    <title>序列流</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/7.-%E5%BA%8F%E5%88%97%E6%B5%81/</link>
    <pubDate>Wed, 29 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/7.-%E5%BA%8F%E5%88%97%E6%B5%81/</guid>
    <description><![CDATA[<p>Java 的序列流（ObjectInputStream 和 ObjectOutputStream）是一种可以将 Java 对象序列化和反序列化的流。</p>
<p>序列化是指将一个对象转换为一个字节序列（包含<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息），以便在网络上传输或保存到文件中，或者在程序之间传递。在 Java 中，序列化通过实现 java.io.Serializable 接口来实现，只有实现了Serializable 接口的对象才能被序列化。</p>]]></description>
</item>
<item>
    <title>异常处理解析</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1.-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Wed, 29 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1.-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[<p>“异常是指中断程序正常执行的一个不确定的事件。当异常发生时，程序的正常执行流程就会被打断。一般情况下，程序都会有很多条语句，如果没有异常处理机制，前面的语句一旦出现了异常，后面的语句就没办法继续执行了。”</p>]]></description>
</item>
<item>
    <title>转换流</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/6.-%E8%BD%AC%E6%8D%A2%E6%B5%81/</link>
    <pubDate>Wed, 29 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/6.-%E8%BD%AC%E6%8D%A2%E6%B5%81/</guid>
    <description><![CDATA[<p>转换流可以将一个字节流包装成字符流，或者将一个字符流包装成字节流。这种转换通常用于处理文本数据，如读取文本文件或将数据从网络传输到应用程序。
转换流主要有两种类型：InputStreamReader 和 OutputStreamWriter。</p>]]></description>
</item>
<item>
    <title>字符流</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/4.-%E5%AD%97%E7%AC%A6%E6%B5%81/</link>
    <pubDate>Sun, 26 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/4.-%E5%AD%97%E7%AC%A6%E6%B5%81/</guid>
    <description><![CDATA[<h1 id="字符流">字符流</h1>
<p><strong>字符流 = 字节流 + 编码表</strong></p>
<h2 id="字符输入流">字符输入流</h2>
<p><code>java.io.Reader</code>是<strong>字符输入流</strong>的<strong>超类</strong>（父类），它定义了字符输入流的一些共性方法：</p>
<ul>
<li>1、<code>close()</code>：关闭此流并释放与此流相关的系统资源。</li>
<li>2、<code>read()</code>：从输入流读取一个字符。</li>
<li>3、<code>read(char[] cbuf)</code>：从输入流中读取一些字符，并将它们存储到字符数组 <code>cbuf</code>中</li>
</ul>
<p>FileReader 是 Reader 的子类，用于从文件中读取字符数据。它的主要特点如下：</p>]]></description>
</item>
<item>
    <title>dify修改嵌入聊天框的power by图标</title>
    <link>//localhost:1313/posts/dify/dify%E4%BF%AE%E6%94%B9%E5%B5%8C%E5%85%A5%E8%81%8A%E5%A4%A9%E6%A1%86%E7%9A%84power-by%E5%9B%BE%E6%A0%87/</link>
    <pubDate>Sat, 25 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/dify/dify%E4%BF%AE%E6%94%B9%E5%B5%8C%E5%85%A5%E8%81%8A%E5%A4%A9%E6%A1%86%E7%9A%84power-by%E5%9B%BE%E6%A0%87/</guid>
    <description><![CDATA[<h2 id="背景">背景</h2>
<p>最近近期公司需要使用dify框架开发一个公司网站的AI客服助手，但是嵌入网站时会显示powered by dify。有dify的logo。</p>
<h2 id="版本">版本</h2>
<p>dify版本：1.9.1
docker部署</p>]]></description>
</item>
<item>
    <title></title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/2.-%E6%96%87%E4%BB%B6%E6%B5%81/</link>
    <pubDate>Fri, 17 Oct 2025 00:00:00 &#43;0000</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/javaio/2.-%E6%96%87%E4%BB%B6%E6%B5%81/</guid>
    <description><![CDATA[<p><code>java.io.File</code> 类是专门对文件进行操作的类，注意只能对文件本身进行操作，不能对文件内容进行操作，想要操作内容，必须借助输入输出流。</p>
<p><code>File</code> 类是文件和文件夹的抽象表示，主要用于文件和文件夹的创建、查找和删除等操作。</p>]]></description>
</item>
<item>
    <title>Iterator和Iterable有什么区别</title>
    <link>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/iterator%E5%92%8Citerable%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
    <pubDate>Thu, 16 Oct 2025 14:52:00 &#43;0800</pubDate>
    <author>aidenz2019@outlook.com (aidenz)</author>
    <guid>//localhost:1313/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/iterator%E5%92%8Citerable%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
    <description><![CDATA[<p>Iterator 是个接口，JDK 1.2 的时候就有了，用来改进 Enumeration 接口：</p>
<ul>
<li>允许删除元素（增加了 remove 方法）</li>
<li>优化了方法名（Enumeration 中是 hasMoreElements 和 nextElement，不简洁）
 Iterator 的源码：
 <code>java  public interface Iterator&lt;E&gt; { // 判断集合中是否存在下一个对象 boolean hasNext(); // 返回集合中的下一个对象，并将访问指针移动一位 E next(); // 删除集合中调用next()方法返回的对象 default void remove() { throw new UnsupportedOperationException(&quot;remove&quot;); } }  </code>
JDK 1.8 时，Iterable 接口中新增了 forEach 方法。该方法接受一个 Consumer 对象作为参数，用于对集合中的每个元素执行指定的操作。该方法的实现方式是使用 for-each 循环遍历集合中的元素，对于每个元素，调用 Consumer 对象的 accept 方法执行指定的操作。</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">default</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">forEach</span><span class="p">(</span><span class="n">Consumer</span><span class="o">&lt;?</span><span class="w"> </span><span class="kd">super</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">action</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Objects</span><span class="p">.</span><span class="na">requireNonNull</span><span class="p">(</span><span class="n">action</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">T</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="k">this</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">action</span><span class="p">.</span><span class="na">accept</span><span class="p">(</span><span class="n">t</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>该方法实现时首先会对 action 参数进行非空检查，如果为 null 则抛出 NullPointerException 异常。然后使用 for-each 循环遍历集合中的元素，并对每个元素调用 action.accept(t) 方法执行指定的操作。由于 Iterable 接口是 Java 集合框架中所有集合类型的基本接口，因此该方法可以被所有实现了 Iterable 接口的集合类型使用。
它对 Iterable 的每个元素执行给定操作，具体指定的操作需要自己写Consumer接口通过accept方法回调出来。</p>]]></description>
</item>
</channel>
</rss>
